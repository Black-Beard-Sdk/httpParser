//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from HtmlPatternParser.g4 by ANTLR 4.7

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace Bb.Sdk.HttpParser.Grammar.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7")]
[System.CLSCompliant(false)]
public partial class HtmlPatternParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		AS=1, ATTRIBUTE=2, ARRAY=3, SUB=4, SKIP1=5, JSON=6, NODE=7, NEW=8, OBJECT=9, 
		PROPERTY=10, SEARCH=11, SELECT=12, LIMIT=13, USING=14, STRING=15, DECIMAL=16, 
		INTEGER=17, DATE=18, UUID=19, BOOLEAN=20, CHAR_STRING=21, LEFT_PAREN=22, 
		RIGHT_PAREN=23, LEFT_BRACE=24, RIGHT_BRACE=25, SEMICOLON=26, COLON=27, 
		COMMA=28, DOT=29, WILDCARD=30, PIPE=31, SPACES=32, NUMBER=33, SINGLE_LINE_COMMENT=34, 
		MULTI_LINE_COMMENT=35, REGULAR_ID=36;
	public const int
		RULE_script = 0, RULE_unit_statement = 1, RULE_using = 2, RULE_search = 3, 
		RULE_output = 4, RULE_select = 5, RULE_type = 6, RULE_attribute = 7, RULE_pagination = 8, 
		RULE_count = 9, RULE_function = 10, RULE_arguments = 11, RULE_argument = 12, 
		RULE_key = 13, RULE_numbers = 14, RULE_text = 15;
	public static readonly string[] ruleNames = {
		"script", "unit_statement", "using", "search", "output", "select", "type", 
		"attribute", "pagination", "count", "function", "arguments", "argument", 
		"key", "numbers", "text"
	};

	private static readonly string[] _LiteralNames = {
		null, "'AS'", "'ATTRIBUTE'", "'ARRAY'", "'SUB'", "'SKIP'", "'JSON'", "'NODE'", 
		"'NEW'", "'OBJECT'", "'PROPERTY'", "'SEARCH'", "'SELECT'", "'LIMIT'", 
		"'USING'", "'STRING'", "'DECIMAL'", "'INTEGER'", "'DATE'", "'UUID'", "'BOOLEAN'", 
		null, "'('", "')'", "'{'", "'}'", "';'", "':'", "','", "'.'", "'*'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "AS", "ATTRIBUTE", "ARRAY", "SUB", "SKIP1", "JSON", "NODE", "NEW", 
		"OBJECT", "PROPERTY", "SEARCH", "SELECT", "LIMIT", "USING", "STRING", 
		"DECIMAL", "INTEGER", "DATE", "UUID", "BOOLEAN", "CHAR_STRING", "LEFT_PAREN", 
		"RIGHT_PAREN", "LEFT_BRACE", "RIGHT_BRACE", "SEMICOLON", "COLON", "COMMA", 
		"DOT", "WILDCARD", "PIPE", "SPACES", "NUMBER", "SINGLE_LINE_COMMENT", 
		"MULTI_LINE_COMMENT", "REGULAR_ID"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "HtmlPatternParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static HtmlPatternParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public HtmlPatternParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public HtmlPatternParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}
	public partial class ScriptContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(HtmlPatternParser.Eof, 0); }
		public UsingContext[] @using() {
			return GetRuleContexts<UsingContext>();
		}
		public UsingContext @using(int i) {
			return GetRuleContext<UsingContext>(i);
		}
		public Unit_statementContext[] unit_statement() {
			return GetRuleContexts<Unit_statementContext>();
		}
		public Unit_statementContext unit_statement(int i) {
			return GetRuleContext<Unit_statementContext>(i);
		}
		public ITerminalNode[] SEMICOLON() { return GetTokens(HtmlPatternParser.SEMICOLON); }
		public ITerminalNode SEMICOLON(int i) {
			return GetToken(HtmlPatternParser.SEMICOLON, i);
		}
		public ScriptContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_script; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScript(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScriptContext script() {
		ScriptContext _localctx = new ScriptContext(Context, State);
		EnterRule(_localctx, 0, RULE_script);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==USING) {
				{
				{
				State = 32; @using();
				}
				}
				State = 37;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 43;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEARCH) {
				{
				{
				State = 38; unit_statement();
				State = 39; Match(SEMICOLON);
				}
				}
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 46; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Unit_statementContext : ParserRuleContext {
		public SearchContext search() {
			return GetRuleContext<SearchContext>(0);
		}
		public Unit_statementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unit_statement; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUnit_statement(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Unit_statementContext unit_statement() {
		Unit_statementContext _localctx = new Unit_statementContext(Context, State);
		EnterRule(_localctx, 2, RULE_unit_statement);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 48; search();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UsingContext : ParserRuleContext {
		public ITerminalNode USING() { return GetToken(HtmlPatternParser.USING, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public UsingContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_using; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitUsing(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public UsingContext @using() {
		UsingContext _localctx = new UsingContext(Context, State);
		EnterRule(_localctx, 4, RULE_using);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 50; Match(USING);
			State = 51; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SearchContext : ParserRuleContext {
		public ITerminalNode SEARCH() { return GetToken(HtmlPatternParser.SEARCH, 0); }
		public ITerminalNode NODE() { return GetToken(HtmlPatternParser.NODE, 0); }
		public TextContext[] text() {
			return GetRuleContexts<TextContext>();
		}
		public TextContext text(int i) {
			return GetRuleContext<TextContext>(i);
		}
		public PaginationContext pagination() {
			return GetRuleContext<PaginationContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(HtmlPatternParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(HtmlPatternParser.RIGHT_PAREN, 0); }
		public ITerminalNode SUB() { return GetToken(HtmlPatternParser.SUB, 0); }
		public NumbersContext numbers() {
			return GetRuleContext<NumbersContext>(0);
		}
		public ITerminalNode[] PIPE() { return GetTokens(HtmlPatternParser.PIPE); }
		public ITerminalNode PIPE(int i) {
			return GetToken(HtmlPatternParser.PIPE, i);
		}
		public OutputContext output() {
			return GetRuleContext<OutputContext>(0);
		}
		public SearchContext[] search() {
			return GetRuleContexts<SearchContext>();
		}
		public SearchContext search(int i) {
			return GetRuleContext<SearchContext>(i);
		}
		public SelectContext[] select() {
			return GetRuleContexts<SelectContext>();
		}
		public SelectContext select(int i) {
			return GetRuleContext<SelectContext>(i);
		}
		public SearchContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_search; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSearch(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SearchContext search() {
		SearchContext _localctx = new SearchContext(Context, State);
		EnterRule(_localctx, 6, RULE_search);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 53; Match(SEARCH);
			State = 56;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SUB) {
				{
				State = 54; Match(SUB);
				State = 55; numbers();
				}
			}

			State = 58; Match(NODE);
			State = 59; text();
			State = 64;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==PIPE) {
				{
				{
				State = 60; Match(PIPE);
				State = 61; text();
				}
				}
				State = 66;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 67; pagination();
			State = 69;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 68; output();
				}
			}

			State = 71; Match(LEFT_PAREN);
			State = 76;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==SEARCH || _la==CHAR_STRING) {
				{
				State = 74;
				ErrorHandler.Sync(this);
				switch (TokenStream.LA(1)) {
				case SEARCH:
					{
					State = 72; search();
					}
					break;
				case CHAR_STRING:
					{
					State = 73; select();
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				}
				State = 78;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 79; Match(RIGHT_PAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class OutputContext : ParserRuleContext {
		public ITerminalNode AS() { return GetToken(HtmlPatternParser.AS, 0); }
		public ITerminalNode NEW() { return GetToken(HtmlPatternParser.NEW, 0); }
		public ITerminalNode OBJECT() { return GetToken(HtmlPatternParser.OBJECT, 0); }
		public ITerminalNode ARRAY() { return GetToken(HtmlPatternParser.ARRAY, 0); }
		public ITerminalNode PROPERTY() { return GetToken(HtmlPatternParser.PROPERTY, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(HtmlPatternParser.COLON, 0); }
		public OutputContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_output; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitOutput(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public OutputContext output() {
		OutputContext _localctx = new OutputContext(Context, State);
		EnterRule(_localctx, 8, RULE_output);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 81; Match(AS);
			State = 82; Match(NEW);
			State = 89;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case OBJECT:
				{
				State = 83; Match(OBJECT);
				}
				break;
			case ARRAY:
				{
				State = 84; Match(ARRAY);
				}
				break;
			case PROPERTY:
				{
				State = 85; Match(PROPERTY);
				State = 86; text();
				State = 87; Match(COLON);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SelectContext : ParserRuleContext {
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ITerminalNode COLON() { return GetToken(HtmlPatternParser.COLON, 0); }
		public ITerminalNode SELECT() { return GetToken(HtmlPatternParser.SELECT, 0); }
		public ITerminalNode AS() { return GetToken(HtmlPatternParser.AS, 0); }
		public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public AttributeContext attribute() {
			return GetRuleContext<AttributeContext>(0);
		}
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public ITerminalNode[] LEFT_PAREN() { return GetTokens(HtmlPatternParser.LEFT_PAREN); }
		public ITerminalNode LEFT_PAREN(int i) {
			return GetToken(HtmlPatternParser.LEFT_PAREN, i);
		}
		public SearchContext[] search() {
			return GetRuleContexts<SearchContext>();
		}
		public SearchContext search(int i) {
			return GetRuleContext<SearchContext>(i);
		}
		public ITerminalNode[] RIGHT_PAREN() { return GetTokens(HtmlPatternParser.RIGHT_PAREN); }
		public ITerminalNode RIGHT_PAREN(int i) {
			return GetToken(HtmlPatternParser.RIGHT_PAREN, i);
		}
		public SelectContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_select; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSelect(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SelectContext select() {
		SelectContext _localctx = new SelectContext(Context, State);
		EnterRule(_localctx, 10, RULE_select);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91; text();
			State = 92; Match(COLON);
			State = 95;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==AS) {
				{
				State = 93; Match(AS);
				State = 94; type();
				}
			}

			State = 97; Match(SELECT);
			State = 99;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ATTRIBUTE) {
				{
				State = 98; attribute();
				}
			}

			State = 102;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==REGULAR_ID) {
				{
				State = 101; function();
				}
			}

			State = 110;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==LEFT_PAREN) {
				{
				{
				State = 104; Match(LEFT_PAREN);
				State = 105; search();
				State = 106; Match(RIGHT_PAREN);
				}
				}
				State = 112;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		public ITerminalNode STRING() { return GetToken(HtmlPatternParser.STRING, 0); }
		public ITerminalNode DECIMAL() { return GetToken(HtmlPatternParser.DECIMAL, 0); }
		public ITerminalNode INTEGER() { return GetToken(HtmlPatternParser.INTEGER, 0); }
		public ITerminalNode DATE() { return GetToken(HtmlPatternParser.DATE, 0); }
		public ITerminalNode UUID() { return GetToken(HtmlPatternParser.UUID, 0); }
		public ITerminalNode BOOLEAN() { return GetToken(HtmlPatternParser.BOOLEAN, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitType(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 12, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 113;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << STRING) | (1L << DECIMAL) | (1L << INTEGER) | (1L << DATE) | (1L << UUID) | (1L << BOOLEAN))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AttributeContext : ParserRuleContext {
		public ITerminalNode ATTRIBUTE() { return GetToken(HtmlPatternParser.ATTRIBUTE, 0); }
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public AttributeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_attribute; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAttribute(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AttributeContext attribute() {
		AttributeContext _localctx = new AttributeContext(Context, State);
		EnterRule(_localctx, 14, RULE_attribute);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 115; Match(ATTRIBUTE);
			State = 116; text();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class PaginationContext : ParserRuleContext {
		public CountContext c1;
		public CountContext c2;
		public ITerminalNode SKIP1() { return GetToken(HtmlPatternParser.SKIP1, 0); }
		public ITerminalNode LIMIT() { return GetToken(HtmlPatternParser.LIMIT, 0); }
		public CountContext[] count() {
			return GetRuleContexts<CountContext>();
		}
		public CountContext count(int i) {
			return GetRuleContext<CountContext>(i);
		}
		public PaginationContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_pagination; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPagination(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PaginationContext pagination() {
		PaginationContext _localctx = new PaginationContext(Context, State);
		EnterRule(_localctx, 16, RULE_pagination);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 120;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==SKIP1) {
				{
				State = 118; Match(SKIP1);
				State = 119; _localctx.c1 = count();
				}
			}

			State = 124;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==LIMIT) {
				{
				State = 122; Match(LIMIT);
				State = 123; _localctx.c2 = count();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class CountContext : ParserRuleContext {
		public NumbersContext numbers() {
			return GetRuleContext<NumbersContext>(0);
		}
		public ITerminalNode WILDCARD() { return GetToken(HtmlPatternParser.WILDCARD, 0); }
		public CountContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_count; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitCount(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public CountContext count() {
		CountContext _localctx = new CountContext(Context, State);
		EnterRule(_localctx, 18, RULE_count);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 128;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				{
				State = 126; numbers();
				}
				break;
			case WILDCARD:
				{
				State = 127; Match(WILDCARD);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunctionContext : ParserRuleContext {
		public KeyContext key() {
			return GetRuleContext<KeyContext>(0);
		}
		public ITerminalNode LEFT_PAREN() { return GetToken(HtmlPatternParser.LEFT_PAREN, 0); }
		public ITerminalNode RIGHT_PAREN() { return GetToken(HtmlPatternParser.RIGHT_PAREN, 0); }
		public ArgumentsContext arguments() {
			return GetRuleContext<ArgumentsContext>(0);
		}
		public ITerminalNode PIPE() { return GetToken(HtmlPatternParser.PIPE, 0); }
		public FunctionContext function() {
			return GetRuleContext<FunctionContext>(0);
		}
		public FunctionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunction(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FunctionContext function() {
		FunctionContext _localctx = new FunctionContext(Context, State);
		EnterRule(_localctx, 20, RULE_function);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 130; key();
			State = 131; Match(LEFT_PAREN);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==CHAR_STRING || _la==NUMBER) {
				{
				State = 132; arguments();
				}
			}

			State = 135; Match(RIGHT_PAREN);
			State = 138;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PIPE) {
				{
				State = 136; Match(PIPE);
				State = 137; function();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentsContext : ParserRuleContext {
		public ArgumentContext[] argument() {
			return GetRuleContexts<ArgumentContext>();
		}
		public ArgumentContext argument(int i) {
			return GetRuleContext<ArgumentContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(HtmlPatternParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(HtmlPatternParser.COMMA, i);
		}
		public ArgumentsContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arguments; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArguments(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentsContext arguments() {
		ArgumentsContext _localctx = new ArgumentsContext(Context, State);
		EnterRule(_localctx, 22, RULE_arguments);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 140; argument();
			State = 145;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 141; Match(COMMA);
				State = 142; argument();
				}
				}
				State = 147;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ArgumentContext : ParserRuleContext {
		public NumbersContext numbers() {
			return GetRuleContext<NumbersContext>(0);
		}
		public TextContext text() {
			return GetRuleContext<TextContext>(0);
		}
		public ArgumentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_argument; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitArgument(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ArgumentContext argument() {
		ArgumentContext _localctx = new ArgumentContext(Context, State);
		EnterRule(_localctx, 24, RULE_argument);
		try {
			State = 150;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case NUMBER:
				EnterOuterAlt(_localctx, 1);
				{
				State = 148; numbers();
				}
				break;
			case CHAR_STRING:
				EnterOuterAlt(_localctx, 2);
				{
				State = 149; text();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class KeyContext : ParserRuleContext {
		public ITerminalNode REGULAR_ID() { return GetToken(HtmlPatternParser.REGULAR_ID, 0); }
		public KeyContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_key; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitKey(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public KeyContext key() {
		KeyContext _localctx = new KeyContext(Context, State);
		EnterRule(_localctx, 26, RULE_key);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 152; Match(REGULAR_ID);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class NumbersContext : ParserRuleContext {
		public ITerminalNode[] NUMBER() { return GetTokens(HtmlPatternParser.NUMBER); }
		public ITerminalNode NUMBER(int i) {
			return GetToken(HtmlPatternParser.NUMBER, i);
		}
		public NumbersContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_numbers; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitNumbers(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public NumbersContext numbers() {
		NumbersContext _localctx = new NumbersContext(Context, State);
		EnterRule(_localctx, 28, RULE_numbers);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 155;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 154; Match(NUMBER);
				}
				}
				State = 157;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TextContext : ParserRuleContext {
		public ITerminalNode CHAR_STRING() { return GetToken(HtmlPatternParser.CHAR_STRING, 0); }
		public TextContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_text; } }
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			IHtmlPatternParserVisitor<TResult> typedVisitor = visitor as IHtmlPatternParserVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitText(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public TextContext text() {
		TextContext _localctx = new TextContext(Context, State);
		EnterRule(_localctx, 30, RULE_text);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 159; Match(CHAR_STRING);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '&', '\xA4', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x4', '\n', '\t', '\n', '\x4', '\v', '\t', '\v', 
		'\x4', '\f', '\t', '\f', '\x4', '\r', '\t', '\r', '\x4', '\xE', '\t', 
		'\xE', '\x4', '\xF', '\t', '\xF', '\x4', '\x10', '\t', '\x10', '\x4', 
		'\x11', '\t', '\x11', '\x3', '\x2', '\a', '\x2', '$', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\'', '\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\a', '\x2', ',', '\n', '\x2', '\f', '\x2', '\xE', '\x2', '/', 
		'\v', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', '\x3', '\x3', '\x3', '\x3', 
		'\x4', '\x3', '\x4', '\x3', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x5', '\x5', ';', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\a', '\x5', '\x41', '\n', '\x5', '\f', '\x5', '\xE', 
		'\x5', '\x44', '\v', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', 
		'H', '\n', '\x5', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\a', '\x5', 
		'M', '\n', '\x5', '\f', '\x5', '\xE', '\x5', 'P', '\v', '\x5', '\x3', 
		'\x5', '\x3', '\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x5', 
		'\x6', '\\', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\x3', 
		'\a', '\x5', '\a', '\x62', '\n', '\a', '\x3', '\a', '\x3', '\a', '\x5', 
		'\a', '\x66', '\n', '\a', '\x3', '\a', '\x5', '\a', 'i', '\n', '\a', '\x3', 
		'\a', '\x3', '\a', '\x3', '\a', '\x3', '\a', '\a', '\a', 'o', '\n', '\a', 
		'\f', '\a', '\xE', '\a', 'r', '\v', '\a', '\x3', '\b', '\x3', '\b', '\x3', 
		'\t', '\x3', '\t', '\x3', '\t', '\x3', '\n', '\x3', '\n', '\x5', '\n', 
		'{', '\n', '\n', '\x3', '\n', '\x3', '\n', '\x5', '\n', '\x7F', '\n', 
		'\n', '\x3', '\v', '\x3', '\v', '\x5', '\v', '\x83', '\n', '\v', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x88', '\n', '\f', '\x3', 
		'\f', '\x3', '\f', '\x3', '\f', '\x5', '\f', '\x8D', '\n', '\f', '\x3', 
		'\r', '\x3', '\r', '\x3', '\r', '\a', '\r', '\x92', '\n', '\r', '\f', 
		'\r', '\xE', '\r', '\x95', '\v', '\r', '\x3', '\xE', '\x3', '\xE', '\x5', 
		'\xE', '\x99', '\n', '\xE', '\x3', '\xF', '\x3', '\xF', '\x3', '\x10', 
		'\x6', '\x10', '\x9E', '\n', '\x10', '\r', '\x10', '\xE', '\x10', '\x9F', 
		'\x3', '\x11', '\x3', '\x11', '\x3', '\x11', '\x2', '\x2', '\x12', '\x2', 
		'\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x12', '\x14', '\x16', 
		'\x18', '\x1A', '\x1C', '\x1E', ' ', '\x2', '\x3', '\x3', '\x2', '\x11', 
		'\x16', '\x2', '\xA8', '\x2', '%', '\x3', '\x2', '\x2', '\x2', '\x4', 
		'\x32', '\x3', '\x2', '\x2', '\x2', '\x6', '\x34', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x37', '\x3', '\x2', '\x2', '\x2', '\n', 'S', '\x3', '\x2', 
		'\x2', '\x2', '\f', ']', '\x3', '\x2', '\x2', '\x2', '\xE', 's', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'u', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'z', '\x3', '\x2', '\x2', '\x2', '\x14', '\x82', '\x3', '\x2', '\x2', 
		'\x2', '\x16', '\x84', '\x3', '\x2', '\x2', '\x2', '\x18', '\x8E', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x98', '\x3', '\x2', '\x2', '\x2', '\x1C', 
		'\x9A', '\x3', '\x2', '\x2', '\x2', '\x1E', '\x9D', '\x3', '\x2', '\x2', 
		'\x2', ' ', '\xA1', '\x3', '\x2', '\x2', '\x2', '\"', '$', '\x5', '\x6', 
		'\x4', '\x2', '#', '\"', '\x3', '\x2', '\x2', '\x2', '$', '\'', '\x3', 
		'\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', '\x2', '%', '&', '\x3', 
		'\x2', '\x2', '\x2', '&', '-', '\x3', '\x2', '\x2', '\x2', '\'', '%', 
		'\x3', '\x2', '\x2', '\x2', '(', ')', '\x5', '\x4', '\x3', '\x2', ')', 
		'*', '\a', '\x1C', '\x2', '\x2', '*', ',', '\x3', '\x2', '\x2', '\x2', 
		'+', '(', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', '\x2', '\x2', '\x2', 
		'-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', '\x2', '\x2', '\x2', 
		'.', '\x30', '\x3', '\x2', '\x2', '\x2', '/', '-', '\x3', '\x2', '\x2', 
		'\x2', '\x30', '\x31', '\a', '\x2', '\x2', '\x3', '\x31', '\x3', '\x3', 
		'\x2', '\x2', '\x2', '\x32', '\x33', '\x5', '\b', '\x5', '\x2', '\x33', 
		'\x5', '\x3', '\x2', '\x2', '\x2', '\x34', '\x35', '\a', '\x10', '\x2', 
		'\x2', '\x35', '\x36', '\x5', ' ', '\x11', '\x2', '\x36', '\a', '\x3', 
		'\x2', '\x2', '\x2', '\x37', ':', '\a', '\r', '\x2', '\x2', '\x38', '\x39', 
		'\a', '\x6', '\x2', '\x2', '\x39', ';', '\x5', '\x1E', '\x10', '\x2', 
		':', '\x38', '\x3', '\x2', '\x2', '\x2', ':', ';', '\x3', '\x2', '\x2', 
		'\x2', ';', '<', '\x3', '\x2', '\x2', '\x2', '<', '=', '\a', '\t', '\x2', 
		'\x2', '=', '\x42', '\x5', ' ', '\x11', '\x2', '>', '?', '\a', '!', '\x2', 
		'\x2', '?', '\x41', '\x5', ' ', '\x11', '\x2', '@', '>', '\x3', '\x2', 
		'\x2', '\x2', '\x41', '\x44', '\x3', '\x2', '\x2', '\x2', '\x42', '@', 
		'\x3', '\x2', '\x2', '\x2', '\x42', '\x43', '\x3', '\x2', '\x2', '\x2', 
		'\x43', '\x45', '\x3', '\x2', '\x2', '\x2', '\x44', '\x42', '\x3', '\x2', 
		'\x2', '\x2', '\x45', 'G', '\x5', '\x12', '\n', '\x2', '\x46', 'H', '\x5', 
		'\n', '\x6', '\x2', 'G', '\x46', '\x3', '\x2', '\x2', '\x2', 'G', 'H', 
		'\x3', '\x2', '\x2', '\x2', 'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 
		'N', '\a', '\x18', '\x2', '\x2', 'J', 'M', '\x5', '\b', '\x5', '\x2', 
		'K', 'M', '\x5', '\f', '\a', '\x2', 'L', 'J', '\x3', '\x2', '\x2', '\x2', 
		'L', 'K', '\x3', '\x2', '\x2', '\x2', 'M', 'P', '\x3', '\x2', '\x2', '\x2', 
		'N', 'L', '\x3', '\x2', '\x2', '\x2', 'N', 'O', '\x3', '\x2', '\x2', '\x2', 
		'O', 'Q', '\x3', '\x2', '\x2', '\x2', 'P', 'N', '\x3', '\x2', '\x2', '\x2', 
		'Q', 'R', '\a', '\x19', '\x2', '\x2', 'R', '\t', '\x3', '\x2', '\x2', 
		'\x2', 'S', 'T', '\a', '\x3', '\x2', '\x2', 'T', '[', '\a', '\n', '\x2', 
		'\x2', 'U', '\\', '\a', '\v', '\x2', '\x2', 'V', '\\', '\a', '\x5', '\x2', 
		'\x2', 'W', 'X', '\a', '\f', '\x2', '\x2', 'X', 'Y', '\x5', ' ', '\x11', 
		'\x2', 'Y', 'Z', '\a', '\x1D', '\x2', '\x2', 'Z', '\\', '\x3', '\x2', 
		'\x2', '\x2', '[', 'U', '\x3', '\x2', '\x2', '\x2', '[', 'V', '\x3', '\x2', 
		'\x2', '\x2', '[', 'W', '\x3', '\x2', '\x2', '\x2', '\\', '\v', '\x3', 
		'\x2', '\x2', '\x2', ']', '^', '\x5', ' ', '\x11', '\x2', '^', '\x61', 
		'\a', '\x1D', '\x2', '\x2', '_', '`', '\a', '\x3', '\x2', '\x2', '`', 
		'\x62', '\x5', '\xE', '\b', '\x2', '\x61', '_', '\x3', '\x2', '\x2', '\x2', 
		'\x61', '\x62', '\x3', '\x2', '\x2', '\x2', '\x62', '\x63', '\x3', '\x2', 
		'\x2', '\x2', '\x63', '\x65', '\a', '\xE', '\x2', '\x2', '\x64', '\x66', 
		'\x5', '\x10', '\t', '\x2', '\x65', '\x64', '\x3', '\x2', '\x2', '\x2', 
		'\x65', '\x66', '\x3', '\x2', '\x2', '\x2', '\x66', 'h', '\x3', '\x2', 
		'\x2', '\x2', 'g', 'i', '\x5', '\x16', '\f', '\x2', 'h', 'g', '\x3', '\x2', 
		'\x2', '\x2', 'h', 'i', '\x3', '\x2', '\x2', '\x2', 'i', 'p', '\x3', '\x2', 
		'\x2', '\x2', 'j', 'k', '\a', '\x18', '\x2', '\x2', 'k', 'l', '\x5', '\b', 
		'\x5', '\x2', 'l', 'm', '\a', '\x19', '\x2', '\x2', 'm', 'o', '\x3', '\x2', 
		'\x2', '\x2', 'n', 'j', '\x3', '\x2', '\x2', '\x2', 'o', 'r', '\x3', '\x2', 
		'\x2', '\x2', 'p', 'n', '\x3', '\x2', '\x2', '\x2', 'p', 'q', '\x3', '\x2', 
		'\x2', '\x2', 'q', '\r', '\x3', '\x2', '\x2', '\x2', 'r', 'p', '\x3', 
		'\x2', '\x2', '\x2', 's', 't', '\t', '\x2', '\x2', '\x2', 't', '\xF', 
		'\x3', '\x2', '\x2', '\x2', 'u', 'v', '\a', '\x4', '\x2', '\x2', 'v', 
		'w', '\x5', ' ', '\x11', '\x2', 'w', '\x11', '\x3', '\x2', '\x2', '\x2', 
		'x', 'y', '\a', '\a', '\x2', '\x2', 'y', '{', '\x5', '\x14', '\v', '\x2', 
		'z', 'x', '\x3', '\x2', '\x2', '\x2', 'z', '{', '\x3', '\x2', '\x2', '\x2', 
		'{', '~', '\x3', '\x2', '\x2', '\x2', '|', '}', '\a', '\xF', '\x2', '\x2', 
		'}', '\x7F', '\x5', '\x14', '\v', '\x2', '~', '|', '\x3', '\x2', '\x2', 
		'\x2', '~', '\x7F', '\x3', '\x2', '\x2', '\x2', '\x7F', '\x13', '\x3', 
		'\x2', '\x2', '\x2', '\x80', '\x83', '\x5', '\x1E', '\x10', '\x2', '\x81', 
		'\x83', '\a', ' ', '\x2', '\x2', '\x82', '\x80', '\x3', '\x2', '\x2', 
		'\x2', '\x82', '\x81', '\x3', '\x2', '\x2', '\x2', '\x83', '\x15', '\x3', 
		'\x2', '\x2', '\x2', '\x84', '\x85', '\x5', '\x1C', '\xF', '\x2', '\x85', 
		'\x87', '\a', '\x18', '\x2', '\x2', '\x86', '\x88', '\x5', '\x18', '\r', 
		'\x2', '\x87', '\x86', '\x3', '\x2', '\x2', '\x2', '\x87', '\x88', '\x3', 
		'\x2', '\x2', '\x2', '\x88', '\x89', '\x3', '\x2', '\x2', '\x2', '\x89', 
		'\x8C', '\a', '\x19', '\x2', '\x2', '\x8A', '\x8B', '\a', '!', '\x2', 
		'\x2', '\x8B', '\x8D', '\x5', '\x16', '\f', '\x2', '\x8C', '\x8A', '\x3', 
		'\x2', '\x2', '\x2', '\x8C', '\x8D', '\x3', '\x2', '\x2', '\x2', '\x8D', 
		'\x17', '\x3', '\x2', '\x2', '\x2', '\x8E', '\x93', '\x5', '\x1A', '\xE', 
		'\x2', '\x8F', '\x90', '\a', '\x1E', '\x2', '\x2', '\x90', '\x92', '\x5', 
		'\x1A', '\xE', '\x2', '\x91', '\x8F', '\x3', '\x2', '\x2', '\x2', '\x92', 
		'\x95', '\x3', '\x2', '\x2', '\x2', '\x93', '\x91', '\x3', '\x2', '\x2', 
		'\x2', '\x93', '\x94', '\x3', '\x2', '\x2', '\x2', '\x94', '\x19', '\x3', 
		'\x2', '\x2', '\x2', '\x95', '\x93', '\x3', '\x2', '\x2', '\x2', '\x96', 
		'\x99', '\x5', '\x1E', '\x10', '\x2', '\x97', '\x99', '\x5', ' ', '\x11', 
		'\x2', '\x98', '\x96', '\x3', '\x2', '\x2', '\x2', '\x98', '\x97', '\x3', 
		'\x2', '\x2', '\x2', '\x99', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x9A', 
		'\x9B', '\a', '&', '\x2', '\x2', '\x9B', '\x1D', '\x3', '\x2', '\x2', 
		'\x2', '\x9C', '\x9E', '\a', '#', '\x2', '\x2', '\x9D', '\x9C', '\x3', 
		'\x2', '\x2', '\x2', '\x9E', '\x9F', '\x3', '\x2', '\x2', '\x2', '\x9F', 
		'\x9D', '\x3', '\x2', '\x2', '\x2', '\x9F', '\xA0', '\x3', '\x2', '\x2', 
		'\x2', '\xA0', '\x1F', '\x3', '\x2', '\x2', '\x2', '\xA1', '\xA2', '\a', 
		'\x17', '\x2', '\x2', '\xA2', '!', '\x3', '\x2', '\x2', '\x2', '\x16', 
		'%', '-', ':', '\x42', 'G', 'L', 'N', '[', '\x61', '\x65', 'h', 'p', 'z', 
		'~', '\x82', '\x87', '\x8C', '\x93', '\x98', '\x9F',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace Bb.Sdk.HttpParser.Grammar.Generated
